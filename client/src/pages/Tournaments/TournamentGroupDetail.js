import React, { useState, useEffect } from "react";
import {
  Card,
  Typography,
  Button,
  Space,
  Row,
  Col,
  Table,
  Tag,
  Progress,
  message,
  Modal,
  List,
  Avatar,
  Statistic,
  Empty,
  Popconfirm,
  Form,
  Select,
  Alert,
} from "antd";
import {
  ArrowLeftOutlined,
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
  TeamOutlined,
  TrophyOutlined,
  PlayCircleOutlined,
  EyeOutlined,
  UserOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";

const { Title, Text } = Typography;
const { Option } = Select;

const TournamentGroupDetail = () => {
  const navigate = useNavigate();
  const { id: tournamentId, groupId } = useParams();
  const [group, setGroup] = useState(null);
  const [teams, setTeams] = useState([]);

  // Ê∏ÖÁêÜÈöä‰ºçÂêçÁ®±È°ØÁ§∫ÔºàÁßªÈô§ _{tournament_id} ÂæåÁ∂¥Ôºâ
  const getDisplayTeamName = (teamName) => {
    if (!teamName) return "";
    // Ê™¢Êü•ÊòØÂê¶‰ª• _{tournamentId} ÁµêÂ∞æÔºåÂ¶ÇÊûúÊòØÂâáÁßªÈô§
    const suffix = `_${tournamentId}`;
    if (teamName.endsWith(suffix)) {
      return teamName.slice(0, -suffix.length);
    }
    return teamName;
  };
  const [matches, setMatches] = useState([]);
  const [standings, setStandings] = useState([]);
  const [tournament, setTournament] = useState(null);
  const [loading, setLoading] = useState(true);
  const [addTeamModalVisible, setAddTeamModalVisible] = useState(false);
  const [availableTeams, setAvailableTeams] = useState([]);
  const [form] = Form.useForm();

  useEffect(() => {
    fetchGroupDetail();
    fetchTournament();
  }, [tournamentId, groupId]);

  // Listen for match result updates and refresh data
  useEffect(() => {
    const handleStorageChange = () => {
      const matchResultUpdated = localStorage.getItem("matchResultUpdated");
      if (matchResultUpdated) {
        // Clear the flag and refresh data
        localStorage.removeItem("matchResultUpdated");
        console.log("üîÑ Match result was updated, refreshing group standings...");
        fetchGroupDetail();
      }
    };

    // Check on component mount
    handleStorageChange();

    // Listen for storage changes (when user navigates back from result edit)
    window.addEventListener("storage", handleStorageChange);

    // Also check when the window gains focus (when user returns to this tab)
    window.addEventListener("focus", handleStorageChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
      window.removeEventListener("focus", handleStorageChange);
    };
  }, []);

  const fetchTournament = async () => {
    try {
      const response = await axios.get(`/api/tournaments/${tournamentId}`);
      if (response.data.success) {
        setTournament(response.data.data.tournament || response.data.data);
      }
    } catch (error) {
      console.error("Error fetching tournament:", error);
    }
  };

  const fetchGroupDetail = async () => {
    try {
      setLoading(true);

      // Áç≤ÂèñÂ∞èÁµÑË©≥ÊÉÖ - ‰ΩøÁî®Â∏∏Ë¶èÁöÑÂ∞èÁµÑAPIÔºåÂõ†ÁÇ∫Êï∏ÊìöÁµêÊßãÁõ∏Âêå
      const response = await axios.get(`/api/groups/${groupId}`);

      if (response.data.success) {
        const {
          group: groupData,
          teams: teamsData,
          matches: matchesData,
          standings: standingsData,
        } = response.data.data;

        setGroup(groupData);
        setTeams(teamsData || []);
        setMatches(matchesData || []);
        setStandings(standingsData || []);
      } else {
        message.error("Áç≤ÂèñÂ∞èÁµÑË©≥ÊÉÖÂ§±Êïó");
      }
    } catch (error) {
      console.error("Error fetching group detail:", error);
      message.error("Áç≤ÂèñÂ∞èÁµÑË©≥ÊÉÖÂ§±Êïó");
    } finally {
      setLoading(false);
    }
  };

  const fetchAvailableTeams = async () => {
    try {
      // Áç≤ÂèñÈå¶Ê®ôË≥Ω‰∏≠Êú™ÂàÜÈÖçÂ∞èÁµÑÁöÑÈöä‰ºç
      const response = await axios.get(`/api/tournaments/${tournamentId}/teams`);
      console.log("API Response for available teams:", response.data);

      if (response.data.success) {
        // Handle different possible response structures
        let allTeams = [];
        if (response.data.data) {
          if (Array.isArray(response.data.data)) {
            allTeams = response.data.data;
            console.log("Teams found in response.data.data (array):", allTeams.length);
          } else if (response.data.data.teams && Array.isArray(response.data.data.teams)) {
            allTeams = response.data.data.teams;
            console.log("Teams found in response.data.data.teams:", allTeams.length);
          } else {
            console.log("Unexpected data structure:", response.data.data);
          }
        }

        // ÈÅéÊøæÂá∫Êú™ÂàÜÈÖçÂ∞èÁµÑÁöÑÈöä‰ºç
        const unassignedTeams = allTeams.filter((team) => !team.group_id);
        setAvailableTeams(unassignedTeams);
      } else {
        setAvailableTeams([]);
      }
    } catch (error) {
      console.error("Error fetching available teams:", error);
      message.error("Áç≤ÂèñÂèØÁî®Èöä‰ºçÂ§±Êïó");
      setAvailableTeams([]);
    }
  };

  const handleAddTeam = async (values) => {
    try {
      await axios.post(`/api/groups/${groupId}/teams`, {
        team_id: values.team_id,
      });

      message.success("Èöä‰ºçÊ∑ªÂä†ÊàêÂäü");
      setAddTeamModalVisible(false);
      form.resetFields();
      fetchGroupDetail();
    } catch (error) {
      console.error("Error adding team:", error);
      const errorMessage = error.response?.data?.message || "Ê∑ªÂä†Èöä‰ºçÂ§±Êïó";
      message.error(errorMessage);
    }
  };

  const handleRemoveTeam = async (teamId) => {
    try {
      await axios.delete(`/api/groups/${groupId}/teams/${teamId}`);
      message.success("Èöä‰ºçÁßªÈô§ÊàêÂäü");
      fetchGroupDetail();
    } catch (error) {
      console.error("Error removing team:", error);
      const errorMessage = error.response?.data?.message || "ÁßªÈô§Èöä‰ºçÂ§±Êïó";
      message.error(errorMessage);
    }
  };

  const handleDeleteGroup = async () => {
    try {
      await axios.delete(`/api/groups/${groupId}`);
      message.success("Â∞èÁµÑÂà™Èô§ÊàêÂäü");
      navigate(`/tournaments/${tournamentId}/groups`);
    } catch (error) {
      console.error("Error deleting group:", error);
      const errorMessage = error.response?.data?.message || "Âà™Èô§Â∞èÁµÑÂ§±Êïó";
      message.error(errorMessage);
    }
  };

  const handleGenerateMatches = () => {
    navigate(`/tournaments/${tournamentId}/matches/generate`);
  };

  const openAddTeamModal = () => {
    fetchAvailableTeams();
    setAddTeamModalVisible(true);
  };

  // ÊØîË≥ΩË°®Ê†ºÂàóÂÆöÁæ©
  const matchColumns = [
    {
      title: "ÊØîË≥ΩÁ∑®Ëôü",
      dataIndex: "match_number",
      key: "match_number",
      width: 120,
    },
    {
      title: "Èöä‰ºç1",
      key: "team1",
      render: (_, record) => (
        <Space>
          <div
            style={{
              width: 12,
              height: 12,
              backgroundColor: record.team1_color,
              borderRadius: "50%",
              border: "1px solid #d9d9d9",
            }}
          />
          <Text>{getDisplayTeamName(record.team1_name)}</Text>
        </Space>
      ),
    },
    {
      title: "ÊØîÂàÜ",
      key: "score",
      align: "center",
      render: (_, record) => (
        <Text strong>
          {record.team1_score} - {record.team2_score}
        </Text>
      ),
    },
    {
      title: "Èöä‰ºç2",
      key: "team2",
      render: (_, record) => (
        <Space>
          <div
            style={{
              width: 12,
              height: 12,
              backgroundColor: record.team2_color,
              borderRadius: "50%",
              border: "1px solid #d9d9d9",
            }}
          />
          <Text>{getDisplayTeamName(record.team2_name)}</Text>
        </Space>
      ),
    },
    {
      title: "ÁãÄÊÖã",
      dataIndex: "match_status",
      key: "match_status",
      render: (status) => {
        const statusConfig = {
          pending: { color: "default", text: "ÂæÖÈñãÂßã" },
          active: { color: "processing", text: "ÈÄ≤Ë°å‰∏≠" },
          completed: { color: "success", text: "Â∑≤ÂÆåÊàê" },
          overtime: { color: "warning", text: "Âª∂Èï∑Ë≥Ω" },
        };
        const config = statusConfig[status] || statusConfig.pending;
        return <Tag color={config.color}>{config.text}</Tag>;
      },
    },
    {
      title: "ÊØîË≥ΩÊôÇÈñì",
      dataIndex: "match_date",
      key: "match_date",
      render: (date) => new Date(date).toLocaleString("zh-TW"),
    },
    {
      title: "Êìç‰Ωú",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            icon={<EyeOutlined />}
            onClick={() => navigate(`/tournaments/${tournamentId}/matches/${record.match_id}`)}
          >
            Ë©≥ÊÉÖ
          </Button>
          {record.match_status === "pending" && (
            <Button
              type="link"
              icon={<PlayCircleOutlined />}
              onClick={() => navigate(`/tournaments/${tournamentId}/matches/${record.match_id}/live`)}
            >
              ÈñãÂßã
            </Button>
          )}
        </Space>
      ),
    },
  ];

  // Á©çÂàÜÊ¶úË°®Ê†ºÂàóÂÆöÁæ©
  const standingsColumns = [
    {
      title: "ÊéíÂêç",
      key: "rank",
      width: 60,
      render: (_, __, index) => (
        <Text strong style={{ fontSize: "16px" }}>
          {index + 1}
        </Text>
      ),
    },
    {
      title: "Èöä‰ºç",
      key: "team",
      render: (_, record) => (
        <Space>
          <div
            style={{
              width: 12,
              height: 12,
              backgroundColor: record.team_color,
              borderRadius: "50%",
              border: "1px solid #d9d9d9",
            }}
          />
          <Text strong>{getDisplayTeamName(record.team_name)}</Text>
        </Space>
      ),
    },
    {
      title: "Â†¥Ê¨°",
      dataIndex: "played",
      key: "played",
      align: "center",
      width: 60,
    },
    {
      title: "Âãù",
      dataIndex: "won",
      key: "won",
      align: "center",
      width: 50,
      render: (won) => <Text style={{ color: "#52c41a", fontWeight: "bold" }}>{won}</Text>,
    },
    {
      title: "Âπ≥",
      dataIndex: "drawn",
      key: "drawn",
      align: "center",
      width: 50,
      render: (drawn) => <Text style={{ color: "#faad14", fontWeight: "bold" }}>{drawn}</Text>,
    },
    {
      title: "Ë≤†",
      dataIndex: "lost",
      key: "lost",
      align: "center",
      width: 50,
      render: (lost) => <Text style={{ color: "#ff4d4f", fontWeight: "bold" }}>{lost}</Text>,
    },
    {
      title: "ÈÄ≤ÁêÉ",
      dataIndex: "goals_for",
      key: "goals_for",
      align: "center",
      width: 60,
    },
    {
      title: "Â§±ÁêÉ",
      dataIndex: "goals_against",
      key: "goals_against",
      align: "center",
      width: 60,
    },
    {
      title: "Ê∑®ÂãùÁêÉ",
      key: "goal_difference",
      align: "center",
      width: 80,
      render: (_, record) => {
        const diff = record.goals_for - record.goals_against;
        return (
          <Text style={{ color: diff > 0 ? "#52c41a" : diff < 0 ? "#ff4d4f" : "#666" }}>
            {diff > 0 ? "+" : ""}
            {diff}
          </Text>
        );
      },
    },
    {
      title: "Á©çÂàÜ",
      dataIndex: "points",
      key: "points",
      align: "center",
      width: 60,
      render: (points) => (
        <Text strong style={{ fontSize: "16px", color: "#1890ff" }}>
          {points}
        </Text>
      ),
    },
  ];

  if (loading) {
    return (
      <div style={{ padding: "24px", textAlign: "center" }}>
        <Text>ËºâÂÖ•‰∏≠...</Text>
      </div>
    );
  }

  if (!group) {
    return (
      <div style={{ padding: "24px" }}>
        <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description="Êâæ‰∏çÂà∞ÊåáÂÆöÁöÑÂ∞èÁµÑ" />
      </div>
    );
  }

  const displayGroupName = group.group_name?.includes("_") ? group.group_name.split("_")[0] : group.group_name;

  return (
    <div style={{ padding: "24px" }}>
      <Space direction="vertical" size="large" style={{ width: "100%" }}>
        {/* È†ÅÈù¢Ê®ôÈ°åÂíåÊìç‰Ωú */}
        <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
          <div style={{ display: "flex", alignItems: "center", gap: "16px" }}>
            <Button icon={<ArrowLeftOutlined />} onClick={() => navigate(`/tournaments/${tournamentId}/groups`)}>
              ËøîÂõûÂ∞èÁµÑÂàóË°®
            </Button>
            <div>
              <Title level={2} style={{ margin: 0 }}>
                <TrophyOutlined style={{ marginRight: 8, color: "#faad14" }} />
                Â∞èÁµÑ {displayGroupName}
              </Title>
              <Text type="secondary">{tournament?.tournament_name || `Èå¶Ê®ôË≥Ω ${tournamentId}`} - Â∞èÁµÑË©≥ÊÉÖ</Text>
            </div>
          </div>

          <Space>
            <Button
              icon={<EditOutlined />}
              onClick={() => navigate(`/tournaments/${tournamentId}/groups/${groupId}/edit`)}
            >
              Á∑®ËºØÂ∞èÁµÑ
            </Button>
            <Popconfirm
              title="Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂÄãÂ∞èÁµÑÂóéÔºü"
              description="Âà™Èô§ÂæåÂ∞áÁÑ°Ê≥ïÊÅ¢Âæ©ÔºåÁõ∏ÈóúÁöÑÈöä‰ºçÂíåÊØîË≥Ω‰πüÊúÉË¢´ÂΩ±Èüø„ÄÇ"
              onConfirm={handleDeleteGroup}
              okText="Á¢∫ÂÆö"
              cancelText="ÂèñÊ∂à"
            >
              <Button danger icon={<DeleteOutlined />}>
                Âà™Èô§Â∞èÁµÑ
              </Button>
            </Popconfirm>
          </Space>
        </div>

        {/* Â∞èÁµÑÁµ±Ë®à */}
        <Row gutter={16}>
          <Col span={6}>
            <Card>
              <Statistic
                title="Èöä‰ºçÊï∏Èáè"
                value={teams.length}
                suffix={`/ ${group.max_teams}`}
                valueStyle={{ color: teams.length >= group.max_teams ? "#cf1322" : "#3f8600" }}
              />
              <Progress
                percent={(teams.length / group.max_teams) * 100}
                showInfo={false}
                strokeColor={teams.length >= group.max_teams ? "#ff4d4f" : "#52c41a"}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic title="ÊØîË≥ΩÂ†¥Ê¨°" value={matches.length} valueStyle={{ color: "#1890ff" }} />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Â∑≤ÂÆåÊàêÊØîË≥Ω"
                value={matches.filter((m) => m.match_status === "completed").length}
                suffix={`/ ${matches.length}`}
                valueStyle={{ color: "#52c41a" }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="ÈÄ≤Ë°å‰∏≠ÊØîË≥Ω"
                value={matches.filter((m) => m.match_status === "active").length}
                valueStyle={{ color: "#faad14" }}
              />
            </Card>
          </Col>
        </Row>

        {/* Èöä‰ºçÁÆ°ÁêÜ */}
        <Card
          title={
            <Space>
              <TeamOutlined />
              <span>Èöä‰ºçÁÆ°ÁêÜ</span>
              <Tag color="blue">{teams.length} ÊîØÈöä‰ºç</Tag>
            </Space>
          }
          extra={
            <Space>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={openAddTeamModal}
                disabled={teams.length >= group.max_teams}
              >
                Ê∑ªÂä†Èöä‰ºç
              </Button>
              {teams.length >= 2 && matches.length === 0 && (
                <Button type="default" icon={<PlayCircleOutlined />} onClick={handleGenerateMatches}>
                  ÁîüÊàêÂæ™Áí∞Ë≥Ω
                </Button>
              )}
            </Space>
          }
        >
          {teams.length > 0 ? (
            <List
              grid={{ gutter: 16, xs: 1, sm: 2, md: 3, lg: 4, xl: 4, xxl: 6 }}
              dataSource={teams}
              renderItem={(team) => (
                <List.Item>
                  <Card
                    size="small"
                    actions={[
                      <Button
                        type="link"
                        icon={<EyeOutlined />}
                        onClick={() => navigate(`/tournaments/${tournamentId}/teams/${team.team_id}`)}
                      >
                        Ë©≥ÊÉÖ
                      </Button>,
                      <Popconfirm
                        title="Á¢∫ÂÆöË¶ÅÁßªÈô§ÈÄôÊîØÈöä‰ºçÂóéÔºü"
                        onConfirm={() => handleRemoveTeam(team.team_id)}
                        okText="Á¢∫ÂÆö"
                        cancelText="ÂèñÊ∂à"
                      >
                        <Button type="link" danger icon={<DeleteOutlined />}>
                          ÁßªÈô§
                        </Button>
                      </Popconfirm>,
                    ]}
                  >
                    <Card.Meta
                      avatar={<Avatar style={{ backgroundColor: team.team_color }} icon={<TeamOutlined />} />}
                      title={getDisplayTeamName(team.team_name)}
                      description={`Èöä‰ºçÈ°èËâ≤: ${team.team_color}`}
                    />
                  </Card>
                </List.Item>
              )}
            />
          ) : (
            <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description="Êö´ÁÑ°Èöä‰ºç">
              <Button type="primary" icon={<PlusOutlined />} onClick={openAddTeamModal}>
                Ê∑ªÂä†Á¨¨‰∏ÄÊîØÈöä‰ºç
              </Button>
            </Empty>
          )}
        </Card>

        {/* Á©çÂàÜÊ¶ú */}
        {standings.length > 0 && (
          <Card
            title={
              <Space>
                <TrophyOutlined />
                <span>Á©çÂàÜÊ¶ú</span>
              </Space>
            }
          >
            <Table columns={standingsColumns} dataSource={standings} rowKey="team_id" pagination={false} size="small" />
          </Card>
        )}

        {/* ÊØîË≥ΩÂàóË°® */}
        <Card
          title={
            <Space>
              <PlayCircleOutlined />
              <span>ÊØîË≥ΩÂàóË°®</span>
              <Tag color="blue">{matches.length} Â†¥ÊØîË≥Ω</Tag>
            </Space>
          }
        >
          {matches.length > 0 ? (
            <Table columns={matchColumns} dataSource={matches} rowKey="match_id" pagination={false} size="small" />
          ) : (
            <Empty
              image={Empty.PRESENTED_IMAGE_SIMPLE}
              description={teams.length < 2 ? "Ëá≥Â∞ëÈúÄË¶Å2ÊîØÈöä‰ºçÊâçËÉΩÂâµÂª∫ÊØîË≥Ω" : "Êö´ÁÑ°ÊØîË≥Ω"}
            >
              {teams.length >= 2 && (
                <Button type="primary" icon={<PlayCircleOutlined />} onClick={handleGenerateMatches}>
                  ÁîüÊàêÂæ™Áí∞Ë≥Ω
                </Button>
              )}
            </Empty>
          )}
        </Card>
      </Space>

      {/* Ê∑ªÂä†Èöä‰ºçÊ®°ÊÖãÊ°Ü */}
      <Modal
        title="Ê∑ªÂä†Èöä‰ºçÂà∞Â∞èÁµÑ"
        open={addTeamModalVisible}
        onCancel={() => setAddTeamModalVisible(false)}
        footer={null}
      >
        {availableTeams.length > 0 ? (
          <Form form={form} layout="vertical" onFinish={handleAddTeam}>
            <Form.Item label="ÈÅ∏ÊìáÈöä‰ºç" name="team_id" rules={[{ required: true, message: "Ë´ãÈÅ∏ÊìáË¶ÅÊ∑ªÂä†ÁöÑÈöä‰ºç" }]}>
              <Select placeholder="Ë´ãÈÅ∏ÊìáÈöä‰ºç" size="large">
                {availableTeams.map((team) => (
                  <Option key={team.team_id} value={team.team_id}>
                    <Space>
                      <div
                        style={{
                          width: 12,
                          height: 12,
                          backgroundColor: team.team_color,
                          borderRadius: "50%",
                          border: "1px solid #d9d9d9",
                        }}
                      />
                      {getDisplayTeamName(team.team_name)}
                    </Space>
                  </Option>
                ))}
              </Select>
            </Form.Item>

            <Form.Item>
              <Space>
                <Button type="primary" htmlType="submit">
                  Ê∑ªÂä†Èöä‰ºç
                </Button>
                <Button onClick={() => setAddTeamModalVisible(false)}>ÂèñÊ∂à</Button>
              </Space>
            </Form.Item>
          </Form>
        ) : (
          <div style={{ textAlign: "center", padding: "40px 0" }}>
            <TeamOutlined style={{ fontSize: "48px", color: "#ccc", marginBottom: "16px" }} />
            <div>
              <Text type="secondary">Ê≤íÊúâÂèØÊ∑ªÂä†ÁöÑÈöä‰ºç</Text>
              <br />
              <Text type="secondary" style={{ fontSize: "12px" }}>
                ÊâÄÊúâÈöä‰ºçÈÉΩÂ∑≤ÂàÜÈÖçÂà∞Â∞èÁµÑÊàñÂ∑≤Âú®Áï∂ÂâçÂ∞èÁµÑ‰∏≠
              </Text>
              <br />
              <Button
                type="primary"
                icon={<PlusOutlined />}
                style={{ marginTop: "16px" }}
                onClick={() => {
                  setAddTeamModalVisible(false);
                  navigate(`/tournaments/${tournamentId}/teams/create`);
                }}
              >
                ÂâµÂª∫Êñ∞Èöä‰ºç
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default TournamentGroupDetail;
